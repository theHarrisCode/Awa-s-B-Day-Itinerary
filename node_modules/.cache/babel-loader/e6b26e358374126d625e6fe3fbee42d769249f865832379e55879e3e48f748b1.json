{"ast":null,"code":"function e(e) {\n  return JSON.parse(JSON.stringify(e));\n}\nfunction f(e) {\n  return null == e;\n}\nfunction r(e) {\n  return null !== e && \"object\" == typeof e;\n}\nfunction n(e, f) {\n  const n = Array.isArray(f) ? f : f.split(\".\");\n  let t = e;\n  for (const e of n) {\n    if (!r(t)) return !1;\n    if (!(e in t)) return !1;\n    t = t[e];\n  }\n  return !0;\n}\nfunction t(e, f, n) {\n  const t = Array.isArray(f) ? f : f.split(\".\");\n  let a = e;\n  for (const e of t) {\n    if (!r(a)) return n;\n    if (!(e in a)) return n;\n    a = a[e];\n  }\n  return void 0 === a ? n : a;\n}\nfunction a(e, f, r) {\n  let n = e;\n  const t = Array.isArray(f) ? f : f.split(\".\");\n  for (let e = 0; e < t.length; ++e) e === t.length - 1 ? n[t[e]] = r : n = n[t[e]];\n}\nconst o = {\n  aliceblue: \"#f0f8ff\",\n  antiquewhite: \"#faebd7\",\n  aqua: \"#00ffff\",\n  aquamarine: \"#7fffd4\",\n  azure: \"#f0ffff\",\n  beige: \"#f5f5dc\",\n  bisque: \"#ffe4c4\",\n  black: \"#000000\",\n  blanchedalmond: \"#ffebcd\",\n  blue: \"#0000ff\",\n  blueviolet: \"#8a2be2\",\n  brown: \"#a52a2a\",\n  burlywood: \"#deb887\",\n  cadetblue: \"#5f9ea0\",\n  chartreuse: \"#7fff00\",\n  chocolate: \"#d2691e\",\n  coral: \"#ff7f50\",\n  cornflowerblue: \"#6495ed\",\n  cornsilk: \"#fff8dc\",\n  crimson: \"#dc143c\",\n  cyan: \"#00ffff\",\n  darkblue: \"#00008b\",\n  darkcyan: \"#008b8b\",\n  darkgoldenrod: \"#b8860b\",\n  darkgray: \"#a9a9a9\",\n  darkgreen: \"#006400\",\n  darkkhaki: \"#bdb76b\",\n  darkmagenta: \"#8b008b\",\n  darkolivegreen: \"#556b2f\",\n  darkorange: \"#ff8c00\",\n  darkorchid: \"#9932cc\",\n  darkred: \"#8b0000\",\n  darksalmon: \"#e9967a\",\n  darkseagreen: \"#8fbc8f\",\n  darkslateblue: \"#483d8b\",\n  darkslategray: \"#2f4f4f\",\n  darkturquoise: \"#00ced1\",\n  darkviolet: \"#9400d3\",\n  deeppink: \"#ff1493\",\n  deepskyblue: \"#00bfff\",\n  dimgray: \"#696969\",\n  dodgerblue: \"#1e90ff\",\n  firebrick: \"#b22222\",\n  floralwhite: \"#fffaf0\",\n  forestgreen: \"#228b22\",\n  fuchsia: \"#ff00ff\",\n  gainsboro: \"#dcdcdc\",\n  ghostwhite: \"#f8f8ff\",\n  gold: \"#ffd700\",\n  goldenrod: \"#daa520\",\n  gray: \"#808080\",\n  green: \"#008000\",\n  greenyellow: \"#adff2f\",\n  honeydew: \"#f0fff0\",\n  hotpink: \"#ff69b4\",\n  \"indianred \": \"#cd5c5c\",\n  indigo: \"#4b0082\",\n  ivory: \"#fffff0\",\n  khaki: \"#f0e68c\",\n  lavender: \"#e6e6fa\",\n  lavenderblush: \"#fff0f5\",\n  lawngreen: \"#7cfc00\",\n  lemonchiffon: \"#fffacd\",\n  lightblue: \"#add8e6\",\n  lightcoral: \"#f08080\",\n  lightcyan: \"#e0ffff\",\n  lightgoldenrodyellow: \"#fafad2\",\n  lightgrey: \"#d3d3d3\",\n  lightgreen: \"#90ee90\",\n  lightpink: \"#ffb6c1\",\n  lightsalmon: \"#ffa07a\",\n  lightseagreen: \"#20b2aa\",\n  lightskyblue: \"#87cefa\",\n  lightslategray: \"#778899\",\n  lightsteelblue: \"#b0c4de\",\n  lightyellow: \"#ffffe0\",\n  lime: \"#00ff00\",\n  limegreen: \"#32cd32\",\n  linen: \"#faf0e6\",\n  magenta: \"#ff00ff\",\n  maroon: \"#800000\",\n  mediumaquamarine: \"#66cdaa\",\n  mediumblue: \"#0000cd\",\n  mediumorchid: \"#ba55d3\",\n  mediumpurple: \"#9370d8\",\n  mediumseagreen: \"#3cb371\",\n  mediumslateblue: \"#7b68ee\",\n  mediumspringgreen: \"#00fa9a\",\n  mediumturquoise: \"#48d1cc\",\n  mediumvioletred: \"#c71585\",\n  midnightblue: \"#191970\",\n  mintcream: \"#f5fffa\",\n  mistyrose: \"#ffe4e1\",\n  moccasin: \"#ffe4b5\",\n  navajowhite: \"#ffdead\",\n  navy: \"#000080\",\n  oldlace: \"#fdf5e6\",\n  olive: \"#808000\",\n  olivedrab: \"#6b8e23\",\n  orange: \"#ffa500\",\n  orangered: \"#ff4500\",\n  orchid: \"#da70d6\",\n  palegoldenrod: \"#eee8aa\",\n  palegreen: \"#98fb98\",\n  paleturquoise: \"#afeeee\",\n  palevioletred: \"#d87093\",\n  papayawhip: \"#ffefd5\",\n  peachpuff: \"#ffdab9\",\n  peru: \"#cd853f\",\n  pink: \"#ffc0cb\",\n  plum: \"#dda0dd\",\n  powderblue: \"#b0e0e6\",\n  purple: \"#800080\",\n  rebeccapurple: \"#663399\",\n  red: \"#ff0000\",\n  rosybrown: \"#bc8f8f\",\n  royalblue: \"#4169e1\",\n  saddlebrown: \"#8b4513\",\n  salmon: \"#fa8072\",\n  sandybrown: \"#f4a460\",\n  seagreen: \"#2e8b57\",\n  seashell: \"#fff5ee\",\n  sienna: \"#a0522d\",\n  silver: \"#c0c0c0\",\n  skyblue: \"#87ceeb\",\n  slateblue: \"#6a5acd\",\n  slategray: \"#708090\",\n  snow: \"#fffafa\",\n  springgreen: \"#00ff7f\",\n  steelblue: \"#4682b4\",\n  tan: \"#d2b48c\",\n  teal: \"#008080\",\n  thistle: \"#d8bfd8\",\n  tomato: \"#ff6347\",\n  turquoise: \"#40e0d0\",\n  violet: \"#ee82ee\",\n  wheat: \"#f5deb3\",\n  white: \"#ffffff\",\n  whitesmoke: \"#f5f5f5\",\n  yellow: \"#ffff00\",\n  yellowgreen: \"#9acd32\"\n};\nfunction i(e) {\n  return e.startsWith(\"#\") ? 4 === e.length ? `#${e[1]}${e[1]}${e[2]}${e[2]}${e[3]}${e[3]}` : e : o[e.toLowerCase()] || \"#000000\";\n}\nfunction l(e) {\n  if (!e || \"string\" != typeof e) return;\n  return e.split(\",\").filter(e => e).map(e => e.split(\":\")).filter(e => 2 == e.length).reduce((e, f) => (e[f[0].toLowerCase()] = i(f[1]), e), {});\n}\nfunction d(e) {\n  return \"light\" === e || 1 === e || \"1\" === e ? 1 : \"regular\" === e || 2 === e || \"2\" === e ? 2 : \"bold\" === e || 3 === e || \"3\" === e ? 3 : \"number\" == typeof e || \"string\" == typeof e ? +e : void 0;\n}\nfunction c(e) {\n  if (\"string\" == typeof e) return e;\n}\nfunction u(e) {\n  const f = e.toString(16);\n  return 1 == f.length ? \"0\" + f : f;\n}\nfunction s(e) {\n  return Math.round(e / 255 * 1e3) / 1e3;\n}\nfunction b(e) {\n  return Math.round(255 * e);\n}\nfunction g(e) {\n  const {\n    r: f,\n    g: r,\n    b: n\n  } = function (e) {\n    let f = parseInt(\"#\" != e[0] ? e : e.substring(1), 16);\n    return {\n      r: f >> 16 & 255,\n      g: f >> 8 & 255,\n      b: 255 & f\n    };\n  }(e);\n  return [s(f), s(r), s(n)];\n}\nfunction h(e) {\n  return function (e) {\n    return \"#\" + u(e.r) + u(e.g) + u(e.b);\n  }({\n    r: b(e[0]),\n    g: b(e[1]),\n    b: b(e[2])\n  });\n}\nfunction p(e, {\n  lottieInstance: f\n} = {}) {\n  const r = [];\n  return e && e.layers ? (e.layers.forEach((e, n) => {\n    e.nm && e.ef && e.ef.forEach((e, t) => {\n      const a = e?.ef?.[0]?.v?.k;\n      if (void 0 === a) return;\n      let o, i;\n      if (o = f ? `renderer.elements.${n}.effectsManager.effectElements.${t}.effectElements.0.p.v` : `layers.${n}.ef.${t}.ef.0.v.k`, \"ADBE Color Control\" === e.mn ? i = \"color\" : \"ADBE Slider Control\" === e.mn ? i = \"slider\" : \"ADBE Point Control\" === e.mn ? i = \"point\" : \"ADBE Checkbox Control\" === e.mn ? i = \"checkbox\" : e.mn.startsWith(\"Pseudo/\") && (i = \"feature\"), !i) return;\n      const l = e.nm.toLowerCase();\n      r.push({\n        name: l,\n        path: o,\n        value: a,\n        type: i\n      });\n    });\n  }), r) : r;\n}\nfunction y(e, f) {\n  for (const r of f) a(e, r.path, r.value);\n}\nfunction m(e, f, r) {\n  for (const n of f) \"color\" === n.type ? \"object\" == typeof r && \"r\" in r && \"g\" in r && \"b\" in r ? a(e, n.path, [s(r.r), s(r.g), s(r.b)]) : Array.isArray(r) ? a(e, n.path, r) : \"string\" == typeof r && a(e, n.path, g(i(r))) : \"point\" === n.type ? \"object\" == typeof r && \"x\" in r && \"y\" in r ? (a(e, n.path + \".0\", r.x), a(e, n.path + \".1\", r.y)) : Array.isArray(r) && (a(e, n.path + \".0\", r[0]), a(e, n.path + \".1\", r[1])) : a(e, n.path, r);\n}\nexport { e as deepClone, t as get, n as has, g as hexToLottieColor, f as isNil, r as isObjectLike, h as lottieColorToHex, i as parseColor, l as parseColors, c as parseState, d as parseStroke, p as readProperties, y as resetProperties, a as set, m as updateProperties };","map":{"version":3,"names":["e","JSON","parse","stringify","f","r","n","Array","isArray","split","t","a","length","o","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","i","startsWith","toLowerCase","l","filter","map","reduce","d","c","u","toString","s","Math","round","b","g","parseInt","substring","h","p","lottieInstance","layers","forEach","nm","ef","v","k","mn","push","name","path","value","type","y","m","x","deepClone","get","has","hexToLottieColor","isNil","isObjectLike","lottieColorToHex","parseColor","parseColors","parseState","parseStroke","readProperties","resetProperties","set","updateProperties"],"sources":["/Users/dharris1014/Dropbox/Mac/Desktop/Awa's Birthday Itinerary/awa-bday/node_modules/@lordicon/helpers/src/core.ts","/Users/dharris1014/Dropbox/Mac/Desktop/Awa's Birthday Itinerary/awa-bday/node_modules/@lordicon/helpers/src/global.ts","/Users/dharris1014/Dropbox/Mac/Desktop/Awa's Birthday Itinerary/awa-bday/node_modules/@lordicon/helpers/src/parsers.ts","/Users/dharris1014/Dropbox/Mac/Desktop/Awa's Birthday Itinerary/awa-bday/node_modules/@lordicon/helpers/src/lottie.ts"],"sourcesContent":["/**\n * Deep clone of value.\n * @param value\n */\nexport function deepClone(value: any) {\n    return JSON.parse(JSON.stringify(value));\n}\n\n/**\n * Check value is null or undefined.\n * @param value \n * @returns\n */\nexport function isNil(value: any) {\n    return value === null || value === undefined;\n}\n\n/**\n * Checks if value is object-like. A value is object-like if it\"s not null and has a typeof result of \"object\".\n * @param value\n */\nexport function isObjectLike(value: any): value is object {\n    return value !== null && typeof value === \"object\";\n}\n\n/**\n * Checks if path is a direct property of object.\n * @param object\n * @param path\n */\nexport function has<T>(object: T, path: string | string[]): boolean {\n    const newPath = Array.isArray(path) ? path : path.split(\".\");\n    let current: any = object;\n\n    for (const key of newPath) {\n        if (!isObjectLike(current)) {\n            return false;\n        }\n\n        if (!(key in current)) {\n            return false;\n        }\n\n        current = (current as any)[key];\n    }\n\n    return true;\n}\n\n/**\n * Get object value from path. Otherwise return defaultValue.\n * @param object\n * @param path\n * @param defaultValue\n */\nexport function get<T>(object: T, path: string | string[], defaultValue?: any): any {\n    const newPath = Array.isArray(path) ? path : path.split(\".\");\n    let current: any = object;\n\n    for (const key of newPath) {\n        if (!isObjectLike(current)) {\n            return defaultValue;\n        }\n\n        if (!(key in current)) {\n            return defaultValue;\n        }\n\n        current = (current as any)[key];\n    }\n\n    return current === undefined ? defaultValue : current;\n}\n\n/**\n * Update object value on path.\n * @param object\n * @param path\n * @param value\n */\nexport function set(object: any, path: string | string[], value: any) {\n    let current: any = object;\n\n    const newPath = Array.isArray(path) ? path : path.split(\".\");\n\n    for (let i = 0; i < newPath.length; ++i) {\n        if (i === newPath.length - 1) {\n            current[newPath[i]] = value;\n        } else {\n            current = current[newPath[i]];\n        }\n    }\n}\n","/**\n * List of supported colors.\n */\nexport const COLORS: any = {\n    'aliceblue': '#f0f8ff',\n    'antiquewhite': '#faebd7',\n    'aqua': '#00ffff',\n    'aquamarine': '#7fffd4',\n    'azure': '#f0ffff',\n    'beige': '#f5f5dc',\n    'bisque': '#ffe4c4',\n    'black': '#000000',\n    'blanchedalmond': '#ffebcd',\n    'blue': '#0000ff',\n    'blueviolet': '#8a2be2',\n    'brown': '#a52a2a',\n    'burlywood': '#deb887',\n    'cadetblue': '#5f9ea0',\n    'chartreuse': '#7fff00',\n    'chocolate': '#d2691e',\n    'coral': '#ff7f50',\n    'cornflowerblue': '#6495ed',\n    'cornsilk': '#fff8dc',\n    'crimson': '#dc143c',\n    'cyan': '#00ffff',\n    'darkblue': '#00008b',\n    'darkcyan': '#008b8b',\n    'darkgoldenrod': '#b8860b',\n    'darkgray': '#a9a9a9',\n    'darkgreen': '#006400',\n    'darkkhaki': '#bdb76b',\n    'darkmagenta': '#8b008b',\n    'darkolivegreen': '#556b2f',\n    'darkorange': '#ff8c00',\n    'darkorchid': '#9932cc',\n    'darkred': '#8b0000',\n    'darksalmon': '#e9967a',\n    'darkseagreen': '#8fbc8f',\n    'darkslateblue': '#483d8b',\n    'darkslategray': '#2f4f4f',\n    'darkturquoise': '#00ced1',\n    'darkviolet': '#9400d3',\n    'deeppink': '#ff1493',\n    'deepskyblue': '#00bfff',\n    'dimgray': '#696969',\n    'dodgerblue': '#1e90ff',\n    'firebrick': '#b22222',\n    'floralwhite': '#fffaf0',\n    'forestgreen': '#228b22',\n    'fuchsia': '#ff00ff',\n    'gainsboro': '#dcdcdc',\n    'ghostwhite': '#f8f8ff',\n    'gold': '#ffd700',\n    'goldenrod': '#daa520',\n    'gray': '#808080',\n    'green': '#008000',\n    'greenyellow': '#adff2f',\n    'honeydew': '#f0fff0',\n    'hotpink': '#ff69b4',\n    'indianred ': '#cd5c5c',\n    'indigo': '#4b0082',\n    'ivory': '#fffff0',\n    'khaki': '#f0e68c',\n    'lavender': '#e6e6fa',\n    'lavenderblush': '#fff0f5',\n    'lawngreen': '#7cfc00',\n    'lemonchiffon': '#fffacd',\n    'lightblue': '#add8e6',\n    'lightcoral': '#f08080',\n    'lightcyan': '#e0ffff',\n    'lightgoldenrodyellow': '#fafad2',\n    'lightgrey': '#d3d3d3',\n    'lightgreen': '#90ee90',\n    'lightpink': '#ffb6c1',\n    'lightsalmon': '#ffa07a',\n    'lightseagreen': '#20b2aa',\n    'lightskyblue': '#87cefa',\n    'lightslategray': '#778899',\n    'lightsteelblue': '#b0c4de',\n    'lightyellow': '#ffffe0',\n    'lime': '#00ff00',\n    'limegreen': '#32cd32',\n    'linen': '#faf0e6',\n    'magenta': '#ff00ff',\n    'maroon': '#800000',\n    'mediumaquamarine': '#66cdaa',\n    'mediumblue': '#0000cd',\n    'mediumorchid': '#ba55d3',\n    'mediumpurple': '#9370d8',\n    'mediumseagreen': '#3cb371',\n    'mediumslateblue': '#7b68ee',\n    'mediumspringgreen': '#00fa9a',\n    'mediumturquoise': '#48d1cc',\n    'mediumvioletred': '#c71585',\n    'midnightblue': '#191970',\n    'mintcream': '#f5fffa',\n    'mistyrose': '#ffe4e1',\n    'moccasin': '#ffe4b5',\n    'navajowhite': '#ffdead',\n    'navy': '#000080',\n    'oldlace': '#fdf5e6',\n    'olive': '#808000',\n    'olivedrab': '#6b8e23',\n    'orange': '#ffa500',\n    'orangered': '#ff4500',\n    'orchid': '#da70d6',\n    'palegoldenrod': '#eee8aa',\n    'palegreen': '#98fb98',\n    'paleturquoise': '#afeeee',\n    'palevioletred': '#d87093',\n    'papayawhip': '#ffefd5',\n    'peachpuff': '#ffdab9',\n    'peru': '#cd853f',\n    'pink': '#ffc0cb',\n    'plum': '#dda0dd',\n    'powderblue': '#b0e0e6',\n    'purple': '#800080',\n    'rebeccapurple': '#663399',\n    'red': '#ff0000',\n    'rosybrown': '#bc8f8f',\n    'royalblue': '#4169e1',\n    'saddlebrown': '#8b4513',\n    'salmon': '#fa8072',\n    'sandybrown': '#f4a460',\n    'seagreen': '#2e8b57',\n    'seashell': '#fff5ee',\n    'sienna': '#a0522d',\n    'silver': '#c0c0c0',\n    'skyblue': '#87ceeb',\n    'slateblue': '#6a5acd',\n    'slategray': '#708090',\n    'snow': '#fffafa',\n    'springgreen': '#00ff7f',\n    'steelblue': '#4682b4',\n    'tan': '#d2b48c',\n    'teal': '#008080',\n    'thistle': '#d8bfd8',\n    'tomato': '#ff6347',\n    'turquoise': '#40e0d0',\n    'violet': '#ee82ee',\n    'wheat': '#f5deb3',\n    'white': '#ffffff',\n    'whitesmoke': '#f5f5f5',\n    'yellow': '#ffff00',\n    'yellowgreen': '#9acd32'\n};","import { COLORS } from './global';\nimport { IColors } from './interfaces';\n\n/**\n * Return hex color from name.\n * \n * Example:\n * ```js\n * parseColor('blue'); // #0000ff\n * ```\n * \n * @param colorName Color name.\n * @returns \n */\nexport function parseColor(colorName: string): string {\n    if (colorName.startsWith('#')) {\n        if (colorName.length === 4) {\n            // support shorthand\n            return `#${colorName[1]}${colorName[1]}${colorName[2]}${colorName[2]}${colorName[3]}${colorName[3]}`;\n        } else {\n            return colorName;\n        }\n    } else {\n        return COLORS[colorName.toLowerCase()] || '#000000';\n    }\n}\n\n/**\n * Parse colors attribute.\n * \n * Example:\n * ```js\n * parseColors('primary:red,secondary:#00ff00'); // { primary: '#ff0000', secondary: '#00ff00' }\n * ```\n * \n * @param colors Colors definied in string.\n * @returns Object with colors.\n */\nexport function parseColors(colors: any): IColors | undefined {\n    if (!colors || typeof colors !== 'string') {\n        return undefined;\n    }\n\n    const list = colors.split(',').filter(c => c).map(c => c.split(':')).filter(c => c.length == 2);\n\n    return list.reduce<IColors>((p, c) => {\n        const a = c[0];\n        p[a.toLowerCase()] = parseColor(c[1]);\n        return p;\n    }, {});\n}\n\n/**\n * Parse stroke attribute to supported range.\n * @param value\n * @returns \n */\nexport function parseStroke(value: any): (1 | 2 | 3 | undefined) {\n    if (value === 'light' || value === 1 || value === '1') {\n        return 1;\n    } else if (value === 'regular' || value === 2 || value === '2') {\n        return 2;\n    } else if (value === 'bold' || value === 3 || value === '3') {\n        return 3;\n    }\n\n    // legacy icon file support (without markers)\n    if (typeof value === 'number' || typeof value === 'string') {\n        return +(value) as any;\n    }\n\n    return undefined;\n}\n\n/**\n * Parse state attribute.\n * @param value\n * @returns\n */\nexport function parseState(value: any): (string | undefined) {\n    if (typeof value === 'string') {\n        return value;\n    }\n\n    return undefined;\n}\n","import { set } from './core';\nimport { IconData } from './interfaces';\nimport { parseColor } from './parsers';\n\n/**\n * Lottie color type.\n */\nexport type LottieColor = [number, number, number];\n\n/**\n * Supported field types.\n */\nexport type LottieFieldType = 'color' | 'slider' | 'point' | 'checkbox' | 'feature';\n\n/**\n * Interface for colors parameters.\n */\nexport interface IRGBColor {\n    r: number;\n    g: number;\n    b: number;\n}\n\n/**\n * Interface for found property.\n */\nexport interface ILottieProperty {\n    name: string;\n    path: string;\n    value: any;\n    type: LottieFieldType;\n}\n\n/**\n * Convert to hexadecimal value.\n * @param c \n * @returns \n */\nfunction componentToHex(c: number) {\n    const hex = c.toString(16);\n    return hex.length == 1 ? '0' + hex : hex;\n}\n\n/**\n * Convert from color object to hex value.\n * @param value \n * @returns \n */\nfunction rgbToHex(value: IRGBColor): string {\n    return (\n        '#' +\n        componentToHex(value.r) +\n        componentToHex(value.g) +\n        componentToHex(value.b)\n    );\n}\n\n/**\n * Conver from hex to color object.\n * @param hex \n * @returns \n */\nfunction hexToRgb(hex: string): IRGBColor {\n    let data: number = parseInt(hex[0] != '#' ? hex : hex.substring(1), 16);\n    return {\n        r: (data >> 16) & 255,\n        g: (data >> 8) & 255,\n        b: data & 255,\n    };\n}\n\n/**\n * Helper method for scale value.\n * @param n\n * @returns \n */\nfunction toUnitVector(n: number) {\n    return Math.round((n / 255) * 1000) / 1000;\n}\n\n/**\n * Helper method for scale value.\n * @param n\n * @returns \n */\nfunction fromUnitVector(n: number) {\n    return Math.round(n * 255);\n}\n\n/**\n * Convert hex color to lottie representation.\n * @param hex\n * @returns \n */\nexport function hexToLottieColor(hex: string): LottieColor {\n    const {\n        r,\n        g,\n        b\n    } = hexToRgb(hex);\n    return [toUnitVector(r), toUnitVector(g), toUnitVector(b)];\n}\n\n/**\n * Conver lottie color representation to hex.\n * @param value \n * @returns \n */\nexport function lottieColorToHex(value: LottieColor): string {\n    const color: IRGBColor = {\n        r: fromUnitVector(value[0]),\n        g: fromUnitVector(value[1]),\n        b: fromUnitVector(value[2]),\n    };\n    return rgbToHex(color);\n}\n\n/**\n * Return all supported customizable properties.\n * @param data Icon data.\n * @param options Options.\n * @returns \n */\nexport function readProperties(\n    data: IconData,\n    { lottieInstance }: { lottieInstance?: boolean } = {},\n): ILottieProperty[] {\n    const result: any[] = [];\n\n    if (!data || !data.layers) {\n        return result;\n    }\n\n    data.layers.forEach((layer: any, layerIndex: number) => {\n        if (!layer.nm || !layer.ef) {\n            return;\n        }\n\n        layer.ef.forEach((field: any, fieldIndex: number) => {\n            const value = field?.ef?.[0]?.v?.k;\n            if (value === undefined) {\n                return;\n            }\n\n            let path: string | undefined;\n\n            if (lottieInstance) {\n                path = `renderer.elements.${layerIndex}.effectsManager.effectElements.${fieldIndex}.effectElements.0.p.v`;\n            } else {\n                path = `layers.${layerIndex}.ef.${fieldIndex}.ef.0.v.k`;\n            }\n\n            let type: LottieFieldType | undefined;\n\n            if (field.mn === 'ADBE Color Control') {\n                type = 'color';\n            } else if (field.mn === 'ADBE Slider Control') {\n                type = 'slider';\n            } else if (field.mn === 'ADBE Point Control') {\n                type = 'point';\n            } else if (field.mn === 'ADBE Checkbox Control') {\n                type = 'checkbox';\n            } else if (field.mn.startsWith('Pseudo/')) {\n                type = 'feature';\n            }\n\n            if (!type) {\n                return;\n            }\n\n            const name = field.nm.toLowerCase();\n\n            result.push({\n                name,\n                path,\n                value,\n                type,\n            });\n        });\n    });\n\n    return result;\n}\n\n/**\n * Reset data by indicated properties.\n * @param data \n * @param properties \n */\nexport function resetProperties(data: IconData, properties: ILottieProperty[]): any {\n    for (const property of properties) {\n        set(data, property.path, property.value);\n    }\n}\n\n/**\n * Update data to value by indicated properties.\n * @param data \n * @param properties \n * @param value \n */\nexport function updateProperties(data: IconData, properties: ILottieProperty[], value: any): any {\n    for (const property of properties) {\n        if (property.type === 'color') {\n            if (typeof value === 'object' && 'r' in value && 'g' in value && 'b' in value) {\n                set(data, property.path, [toUnitVector(value.r), toUnitVector(value.g), toUnitVector(value.b)]);\n            } else if (Array.isArray(value)) {\n                set(data, property.path, value);\n            } else if (typeof value === 'string') {\n                set(data, property.path, hexToLottieColor(parseColor(value)));\n            }\n        } else if (property.type === 'point') {\n            if (typeof value === 'object' && 'x' in value && 'y' in value) {\n                set(data, property.path + '.0', value.x);\n                set(data, property.path + '.1', value.y);\n            } else if (Array.isArray(value)) {\n                set(data, property.path + '.0', value[0]);\n                set(data, property.path + '.1', value[1]);\n            }\n        } else {\n            set(data, property.path, value);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}